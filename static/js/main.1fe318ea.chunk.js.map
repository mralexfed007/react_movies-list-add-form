{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","isButtonHidden","isTitleValid","isImdbUrlValid","isImgUrlValid","isImdbIdValid","newFilmHandler","props","addMovie","setState","dataCheked","event","validator","target","value","name","test","Boolean","handleChange","this","onSubmit","e","preventDefault","type","placeholder","onChange","required","onBlur","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fe318ea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imdbUrl: '',\n    imgUrl: '',\n    imdbId: '',\n    isButtonHidden: true,\n    isTitleValid: true,\n    isImdbUrlValid: true,\n    isImgUrlValid: true,\n    isImdbIdValid: true,\n  };\n\n  newFilmHandler = () => {\n    const {\n      title, description, imdbUrl, imdbId, imgUrl, isTitleValid,\n      isImdbUrlValid, isImdbIdValid, isImgUrlValid,\n    } = this.state;\n\n    if (isTitleValid && isImdbUrlValid && isImgUrlValid && isImdbIdValid) {\n      this.props.addMovie({\n        title,\n        description,\n        imdbUrl,\n        imgUrl,\n        imdbId,\n      });\n      this.setState({\n        title: '',\n        description: '',\n        imdbUrl: '',\n        imgUrl: '',\n        imdbId: '',\n        isButtonHidden: true,\n        isTitleValid: true,\n        isImdbUrlValid: true,\n        isImgUrlValid: true,\n        isImdbIdValid: true,\n      });\n    }\n  }\n\n  dataCheked = (event, validator) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'imgUrl':\n      case 'imdbUrl':\n        this.setState({\n          // eslint-disable-next-line max-len\n          [validator]: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/\n            .test(value),\n        });\n        break;\n\n      default:\n        this.setState({\n          [validator]: (value !== '') ? Boolean(value) : false,\n        });\n        break;\n    }\n\n    this.setState(state => ({\n      isButtonHidden: !(state.isTitleValid && state.isImdbUrlValid\n        && state.isImgUrlValid && state.isImdbIdValid),\n    }));\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      title, description, imdbId, imdbUrl, imgUrl, isButtonHidden,\n      isTitleValid, isImdbIdValid, isImdbUrlValid, isImgUrlValid,\n    } = this.state;\n\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          this.newFilmHandler();\n        }}\n      >\n        <fieldset className=\"formField\">\n          <legend>Add new Film</legend>\n          <label>\n            Title\n            <input\n              className={!isTitleValid ? 'warning' : ''}\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Film title\"\n              value={title}\n              onChange={this.handleChange}\n              required\n              onBlur={(event) => {\n                this.dataCheked(event, 'isTitleValid');\n              }}\n            />\n            {!isTitleValid && <span>Enter title, please</span>}\n          </label>\n          <label>\n            Description\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"Film description\"\n              value={description}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Imdb Id\n            <input\n              className={!isImdbIdValid ? 'warning' : ''}\n              type=\"text\"\n              name=\"imdbId\"\n              placeholder=\"ImdbId\"\n              value={imdbId}\n              onChange={this.handleChange}\n              onBlur={(event) => {\n                this.dataCheked(event, 'isImdbIdValid');\n              }}\n              required\n            />\n            {!isImdbIdValid && <span>Enter valid Id, please</span>}\n          </label>\n          <label>\n            Imdb Url\n            <input\n              className={!isImdbUrlValid ? 'warning' : ''}\n              type=\"text\"\n              name=\"imdbUrl\"\n              placeholder=\"ImdbUrl\"\n              value={imdbUrl}\n              onChange={this.handleChange}\n              onBlur={(event) => {\n                this.dataCheked(event, 'isImdbUrlValid');\n              }}\n              required\n            />\n            {!isImdbUrlValid && <span>Enter valid Imdb Url, please</span>}\n          </label>\n          <label>\n            Img Url\n            <input\n              className={!isImgUrlValid ? 'warning' : ''}\n              type=\"text\"\n              name=\"imgUrl\"\n              placeholder=\"ImgUrl\"\n              value={imgUrl}\n              onChange={this.handleChange}\n              onBlur={(event) => {\n                this.dataCheked(event, 'isImgUrlValid');\n              }}\n              required\n            />\n            {!isImgUrlValid && <span>Enter valid Id, please</span>}\n          </label>\n\n        </fieldset>\n        <button\n          type=\"submit\"\n          disabled={isButtonHidden}\n        >\n          Add film\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState((state) => {\n      return { movies: [...state.movies, movie] };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}